// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/pdrum/moq-go-113/foo"
	"sync"
)

var (
	lockFooMockBar sync.RWMutex
)

// Ensure, that FooMock does implement Foo.
// If this is not the case, regenerate this file with moq.
var _ foo.Foo = &FooMock{}

// FooMock is a mock implementation of Foo.
//
//     func TestSomethingThatUsesFoo(t *testing.T) {
//
//         // make and configure a mocked Foo
//         mockedFoo := &FooMock{
//             BarFunc: func()  {
// 	               panic("mock out the Bar method")
//             },
//         }
//
//         // use mockedFoo in code that requires Foo
//         // and then make assertions.
//
//     }
type FooMock struct {
	// BarFunc mocks the Bar method.
	BarFunc func()

	// calls tracks calls to the methods.
	calls struct {
		// Bar holds details about calls to the Bar method.
		Bar []struct {
		}
	}
}

// Bar calls BarFunc.
func (mock *FooMock) Bar() {
	if mock.BarFunc == nil {
		panic("FooMock.BarFunc: method is nil but Foo.Bar was just called")
	}
	callInfo := struct {
	}{}
	lockFooMockBar.Lock()
	mock.calls.Bar = append(mock.calls.Bar, callInfo)
	lockFooMockBar.Unlock()
	mock.BarFunc()
}

// BarCalls gets all the calls that were made to Bar.
// Check the length with:
//     len(mockedFoo.BarCalls())
func (mock *FooMock) BarCalls() []struct {
} {
	var calls []struct {
	}
	lockFooMockBar.RLock()
	calls = mock.calls.Bar
	lockFooMockBar.RUnlock()
	return calls
}
